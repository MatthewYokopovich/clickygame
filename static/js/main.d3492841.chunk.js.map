{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","onClick","handleClick","data-id","id","Wrapper","children","Title","App","state","friends","counter","matched","removeFriend","filter","friend","setState","shuffleFriends","t","i","m","length","Math","floor","random","e","newid","target","getAttribute","console","log","arr","find","newcount","push","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"ouFAaeA,MAVf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAASN,EAAMO,YAAaC,UAASR,EAAMS,Q,MCA5EC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,MCG1BC,MAJf,SAAeZ,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMW,W,OC6EvBE,E,2MAzEbC,MAAQ,CACNC,UACAC,QAAS,EACTC,QAAS,I,EAGXC,aAAe,SAAAT,GAEb,IAAMM,EAAU,EAAKD,MAAMC,QAAQI,QAAO,SAAAC,GAAM,OAAIA,EAAOX,KAAOA,KAElE,EAAKY,SAAS,CAAEN,a,EAGlBO,eAAiB,WAIjB,IAHE,IAAwBC,EAAGC,EAAvBC,EAAIV,EAAQW,OAGXD,GAGLD,EAAIG,KAAKC,MAAMD,KAAKE,SAAWJ,KAG/BF,EAAIR,EAAQU,GACZV,EAAQU,GAAKV,EAAQS,GACrBT,EAAQS,GAAKD,EAEf,EAAKF,SAAS,CACZN,a,EAGFR,YAAc,SAAAuB,GACZ,IAAMC,EAAQD,EAAEE,OAAOC,aAAa,WACpCC,QAAQC,IAAIJ,GACZ,IAAMK,EAAM,EAAKtB,MAAMG,QACvB,GAAImB,EAAIC,MAAK,SAAAP,GACX,OAAOA,IAAIC,KAUX,EAAKV,SAAS,CACZL,QAAS,EACTC,QAAS,SAXV,CACD,IAAIqB,EAAW,EAAKxB,MAAME,QAAU,EACpCoB,EAAIG,KAAKR,GACT,EAAKV,SAAS,CACZL,QAASsB,EACTrB,QAASmB,IASb,EAAKd,kB,wEAIG,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,eAAekB,KAAK1B,MAAME,SACzBwB,KAAK1B,MAAMC,QAAQ0B,KAAI,SAAArB,GAAM,OAC5B,kBAAC,EAAD,CACEb,YAAa,EAAKA,YAClBE,GAAIW,EAAOX,GACXiC,IAAKtB,EAAOX,GACZN,KAAMiB,EAAOjB,KACbE,MAAOe,EAAOf,gB,GAnERsC,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d3492841.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FriendCard(props) {\r\n  return (\r\n    <div className=\"card\" >\r\n      <div className=\"img-container\" >\r\n        <img alt={props.name} src={props.image} onClick={props.handleClick} data-id={props.id}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\r\nimport FriendCard from \"./components/FriendCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Title from \"./components/Title\";\r\nimport friends from \"./friends.json\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n  state = {\r\n    friends,\r\n    counter: 0,\r\n    matched: []\r\n  };\r\n\r\n  removeFriend = id => {\r\n    // Filter this.state.friends for friends with an id not equal to the id being removed\r\n    const friends = this.state.friends.filter(friend => friend.id !== id);\r\n    // Set this.state.friends equal to the new friends array\r\n    this.setState({ friends });\r\n  };\r\n\r\n  shuffleFriends = ()=>{\r\n    var m = friends.length, t, i;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (m) {\r\n\r\n    // Pick a remaining element…\r\n    i = Math.floor(Math.random() * m--);\r\n\r\n    // And swap it with the current element.\r\n    t = friends[m];\r\n    friends[m] = friends[i];\r\n    friends[i] = t;\r\n  }\r\n  this.setState({\r\n    friends\r\n  })\r\n}\r\n  handleClick = e=>{\r\n    const newid = e.target.getAttribute(\"data-id\");\r\n    console.log(newid);\r\n    const arr = this.state.matched;\r\n    if(!arr.find(e =>{\r\n      return e===newid;\r\n    })){\r\n      let newcount = this.state.counter + 1;\r\n      arr.push(newid);\r\n      this.setState({\r\n        counter: newcount,\r\n        matched: arr\r\n      })\r\n    }\r\n    else{\r\n      this.setState({\r\n        counter: 0,\r\n        matched: []\r\n      })\r\n    }\r\n    this.shuffleFriends();\r\n  }\r\n\r\n  // Map over this.state.friends and render a FriendCard component for each friend object\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title>Score: {this.state.counter}</Title>\r\n        {this.state.friends.map(friend => (\r\n          <FriendCard\r\n            handleClick={this.handleClick}\r\n            id={friend.id}\r\n            key={friend.id}\r\n            name={friend.name}\r\n            image={friend.image}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}